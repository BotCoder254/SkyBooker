<%- include('../partials/admin-header') %>

<div class="flex h-screen bg-gray-100">
    
    
    <div class="flex-1 overflow-auto">
        <div class="p-6">
            <div class="flex justify-between items-center mb-6">
                <h1 class="text-2xl font-semibold text-gray-900">Manage Users</h1>
                
                <!-- Search and Filter Section -->
                <div class="flex gap-4">
                    <input type="text" id="searchInput" placeholder="Search by name, email, or phone" 
                           class="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    
                    <select id="statusFilter" class="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">All Status</option>
                        <option value="active">Active</option>
                        <option value="blocked">Blocked</option>
                    </select>
                    
                    <select id="roleFilter" class="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">All Roles</option>
                        <option value="user">User</option>
                        <option value="admin">Admin</option>
                    </select>
                </div>
            </div>

            <!-- Users Table -->
            <div class="bg-white rounded-lg shadow overflow-hidden">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contact</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- Users will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- User Action Modal -->
<div id="userModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <h3 class="text-lg font-medium text-gray-900 mb-4" id="modalTitle">Update User</h3>
            
            <!-- Status Update -->
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                <select id="newStatus" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="active">Active</option>
                    <option value="blocked">Blocked</option>
                </select>
            </div>
            
            <!-- Role Update -->
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Role</label>
                <select id="newRole" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="user">User</option>
                    <option value="admin">Admin</option>
                </select>
            </div>
            
            <div class="flex justify-end gap-4">
                <button onclick="closeUserModal()" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300">Cancel</button>
                <button onclick="updateUser()" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Update</button>
            </div>
        </div>
    </div>
</div>

<!-- Password Reset Modal -->
<div id="passwordModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Reset Password</h3>
            <p class="text-sm text-gray-600 mb-4">Are you sure you want to reset this user's password?</p>
            <div class="flex justify-end gap-4">
                <button onclick="closePasswordModal()" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300">Cancel</button>
                <button onclick="resetUserPassword()" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600">Reset Password</button>
            </div>
        </div>
    </div>
</div>

<script>
let currentUserId = null;

// Load users with filters
async function loadUsers() {
    try {
        const searchValue = document.getElementById('searchInput').value;
        const statusValue = document.getElementById('statusFilter').value;
        const roleValue = document.getElementById('roleFilter').value;
        
        const params = new URLSearchParams();
        if (searchValue) params.append('search', searchValue);
        if (statusValue) params.append('status', statusValue);
        if (roleValue) params.append('role', roleValue);
        
        const response = await fetch(`/api/admin/users?${params.toString()}`);
        const data = await response.json();
        
        if (data.status === 'success') {
            renderUsers(data.data.users);
        }
    } catch (error) {
        showToast('Error loading users', 'error');
    }
}

// Render users in table
function renderUsers(users) {
    const tbody = document.getElementById('usersTableBody');
    tbody.innerHTML = '';
    
    users.forEach(user => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm font-medium text-gray-900">${user.name}</div>
                <div class="text-sm text-gray-500">Joined ${new Date(user.createdAt).toLocaleDateString()}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">${user.email}</div>
                <div class="text-sm text-gray-500">${user.phone}</div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                    ${user.role === 'admin' ? 'bg-purple-100 text-purple-800' : 'bg-gray-100 text-gray-800'}">
                    ${user.role}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                    ${user.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                    ${user.status}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button onclick="openUserModal('${user._id}')" 
                    class="text-blue-600 hover:text-blue-900 mr-4">Update</button>
                <button onclick="openPasswordModal('${user._id}')"
                    class="text-red-600 hover:text-red-900">Reset Password</button>
            </td>
        `;
        tbody.appendChild(tr);
    });
}

// Modal functions
function openUserModal(userId) {
    currentUserId = userId;
    document.getElementById('userModal').classList.remove('hidden');
}

function closeUserModal() {
    currentUserId = null;
    document.getElementById('userModal').classList.add('hidden');
}

function openPasswordModal(userId) {
    currentUserId = userId;
    document.getElementById('passwordModal').classList.remove('hidden');
}

function closePasswordModal() {
    currentUserId = null;
    document.getElementById('passwordModal').classList.add('hidden');
}

// Update user
async function updateUser() {
    try {
        const status = document.getElementById('newStatus').value;
        const role = document.getElementById('newRole').value;
        
        // Update status
        await fetch(`/api/admin/users/${currentUserId}/status`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status })
        });
        
        // Update role
        await fetch(`/api/admin/users/${currentUserId}/role`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ role })
        });
        
        showToast('User updated successfully', 'success');
        closeUserModal();
        loadUsers();
    } catch (error) {
        showToast(error.message, 'error');
    }
}

// Reset user password
async function resetUserPassword() {
    try {
        const response = await fetch(`/api/admin/users/${currentUserId}/reset-password`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            showToast('Password reset successful. New password: ' + data.data.newPassword, 'success');
            closePasswordModal();
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        showToast(error.message, 'error');
    }
}

// Event listeners
document.getElementById('searchInput').addEventListener('input', debounce(loadUsers, 500));
document.getElementById('statusFilter').addEventListener('change', loadUsers);
document.getElementById('roleFilter').addEventListener('change', loadUsers);

// Initial load
loadUsers();
</script> 