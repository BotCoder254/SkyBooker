<!-- Main Content -->
<div class="flex flex-col flex-1 overflow-hidden">
    <!-- Top Navigation -->
    <header class="flex items-center justify-between px-6 py-4 bg-white border-b">
        <div class="flex items-center">
            <h2 class="text-xl font-semibold text-gray-800 ml-4">My Bookings</h2>
        </div>
        <div class="flex items-center space-x-4">
            <div class="relative">
                <input type="text" 
                       id="searchInput"
                       placeholder="Search bookings..."
                       class="w-64 pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:border-red-500">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400"></i>
                </div>
            </div>
            <select id="statusFilter" 
                    class="border rounded-lg px-4 py-2 focus:outline-none focus:border-red-500">
                <option value="">All Status</option>
                <option value="confirmed">Confirmed</option>
                <option value="pending">Pending</option>
                <option value="cancelled">Cancelled</option>
            </select>
        </div>
    </header>

    <!-- Bookings List -->
    <div class="flex-1 overflow-y-auto p-6">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="bookingsList">
            <!-- Booking cards will be added here dynamically -->
        </div>

        <!-- Loading State -->
        <div id="loadingState" class="hidden text-center py-12">
            <div class="inline-block animate-spin rounded-full h-12 w-12 border-4 border-red-500 border-t-transparent"></div>
            <p class="mt-4 text-gray-600">Loading your bookings...</p>
        </div>

        <!-- No Bookings Message -->
        <div id="noBookings" class="hidden text-center py-12">
            <i class="fas fa-ticket-alt text-6xl text-gray-300 mb-4"></i>
            <h3 class="text-xl font-semibold text-gray-700 mb-2">No Bookings Found</h3>
            <p class="text-gray-500 mb-4">You haven't made any bookings yet</p>
            <a href="/flights" class="inline-block px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                Book a Flight
            </a>
        </div>
    </div>
</div>

<script>
// Initialize the page
document.addEventListener('DOMContentLoaded', function() {
    loadBookings();
    
    // Add event listeners
    document.getElementById('searchInput').addEventListener('input', debounce(filterBookings, 300));
    document.getElementById('statusFilter').addEventListener('change', filterBookings);
});

// Load bookings from API
async function loadBookings() {
    showLoading();
    
    try {
        const response = await fetch('/api/bookings');
        const data = await response.json();
        
        if (data.status === 'success') {
            renderBookings(data.data.bookings);
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        showToast(error.message, 'error');
        showNoBookings();
    }
}

// Render booking cards
function renderBookings(bookings) {
    const container = document.getElementById('bookingsList');
    const noBookings = document.getElementById('noBookings');
    const loading = document.getElementById('loadingState');
    
    container.innerHTML = '';
    
    if (bookings.length === 0) {
        container.classList.add('hidden');
        noBookings.classList.remove('hidden');
    } else {
        container.classList.remove('hidden');
        noBookings.classList.add('hidden');
        
        bookings.forEach(booking => {
            const card = `
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="p-6">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-xl font-semibold">${booking.flight.airline}</h3>
                            <span class="text-sm px-3 py-1 rounded-full ${getStatusClass(booking.status)}">
                                ${booking.status}
                            </span>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <p class="text-sm text-gray-500">From</p>
                                <p class="font-semibold">${booking.flight.departureCity}</p>
                                <p class="text-sm">${formatDate(booking.flight.departureTime)}</p>
                            </div>
                            <div>
                                <p class="text-sm text-gray-500">To</p>
                                <p class="font-semibold">${booking.flight.arrivalCity}</p>
                                <p class="text-sm">${formatDate(booking.flight.arrivalTime)}</p>
                            </div>
                        </div>
                        
                        <div class="flex justify-between items-center">
                            <div>
                                <p class="text-sm text-gray-500">Booking Reference</p>
                                <p class="font-mono font-semibold">${booking.bookingReference}</p>
                            </div>
                            <div class="flex space-x-2">
                                <button onclick="viewBooking('${booking._id}')" 
                                        class="px-4 py-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors">
                                    View Details
                                </button>
                                ${booking.status === 'confirmed' ? `
                                    <button onclick="cancelBooking('${booking._id}')"
                                            class="px-4 py-2 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors">
                                        Cancel
                                    </button>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `;
            container.innerHTML += card;
        });
    }
    
    loading.classList.add('hidden');
}

// Filter bookings based on search and status
function filterBookings() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const statusFilter = document.getElementById('statusFilter').value;
    
    const cards = document.querySelectorAll('#bookingsList > div');
    let visibleCount = 0;
    
    cards.forEach(card => {
        const text = card.textContent.toLowerCase();
        const status = card.querySelector('.rounded-full').textContent.trim().toLowerCase();
        
        const matchesSearch = text.includes(searchTerm);
        const matchesStatus = !statusFilter || status === statusFilter.toLowerCase();
        
        if (matchesSearch && matchesStatus) {
            card.classList.remove('hidden');
            visibleCount++;
        } else {
            card.classList.add('hidden');
        }
    });
    
    // Show/hide no results message
    const noBookings = document.getElementById('noBookings');
    if (visibleCount === 0) {
        noBookings.classList.remove('hidden');
    } else {
        noBookings.classList.add('hidden');
    }
}

// View booking details
function viewBooking(bookingId) {
    window.location.href = `/bookings/${bookingId}`;
}

// Cancel booking
async function cancelBooking(bookingId) {
    if (!confirm('Are you sure you want to cancel this booking?')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/bookings/${bookingId}/cancel`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const data = await response.json();
        
        if (response.ok) {
            showToast('Booking cancelled successfully');
            loadBookings(); // Reload the bookings list
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        showToast(error.message, 'error');
    }
}

// Helper function to get status class
function getStatusClass(status) {
    switch (status.toLowerCase()) {
        case 'confirmed':
            return 'bg-green-100 text-green-800';
        case 'pending':
            return 'bg-yellow-100 text-yellow-800';
        case 'cancelled':
            return 'bg-red-100 text-red-800';
        default:
            return 'bg-gray-100 text-gray-800';
    }
}

// Helper function to format date
function formatDate(dateString) {
    const options = { 
        month: 'short', 
        day: 'numeric', 
        hour: '2-digit', 
        minute: '2-digit'
    };
    return new Date(dateString).toLocaleDateString('en-US', options);
}

// Debounce helper function
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Show loading state
function showLoading() {
    document.getElementById('bookingsList').classList.add('hidden');
    document.getElementById('noBookings').classList.add('hidden');
    document.getElementById('loadingState').classList.remove('hidden');
}

// Show no bookings message
function showNoBookings() {
    document.getElementById('bookingsList').classList.add('hidden');
    document.getElementById('noBookings').classList.remove('hidden');
    document.getElementById('loadingState').classList.add('hidden');
}

// Show toast message
function showToast(message, type = 'success') {
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 z-50';
    toast.innerHTML = `
        <div class="bg-${type === 'success' ? 'green' : 'red'}-100 border border-${type === 'success' ? 'green' : 'red'}-400 text-${type === 'success' ? 'green' : 'red'}-700 px-4 py-3 rounded relative" role="alert">
            <span class="block sm:inline">${message}</span>
        </div>
    `;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 5000);
}
</script> 